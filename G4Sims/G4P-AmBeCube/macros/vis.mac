# --- vis.mac (robust order) ---

/control/verbose 1
/vis/verbose warnings

# 1) Build the world FIRST (even if C++ also calls Initialize, this is harmless)
/run/initialize

# 2) Open an explicit viewer (avoid the generic OGL alias)
/vis/open OGLSQt 1000x800-0+0
# If Wayland gives you a blank canvas:
# (run the program with)  QT_QPA_PLATFORM=xcb

# 3) Create scene and attach BEFORE any auto-refresh or draw
/vis/scene/create
/vis/scene/add/volume
/vis/scene/add/axes 0 0 0 10 cm
/vis/sceneHandler/attach

# 4) Now itâ€™s safe to configure the camera and auto-refresh
/vis/viewer/set/viewpointVector 1 1 1
/vis/viewer/set/upVector 0 0 1
/vis/viewer/set/style surface
/vis/viewer/set/hiddenEdge false
/vis/viewer/set/autoRefresh true
/vis/viewer/reset

# 5) Trajectories and overlays
/vis/scene/add/trajectories smooth
/vis/scene/add/scale 10 cm
/vis/scene/add/eventID

# 7) Event accumulation control
/vis/viewer/set/autoRefresh false
/vis/scene/endOfEventAction accumulate
/vis/viewer/set/autoRefresh true

# Color tracks by particle type
/vis/modeling/trajectories/create/drawByParticleID
# Option A: use named colours
#/vis/modeling/trajectories/drawByParticleID-0/set gamma yellow
#/vis/modeling/trajectories/drawByParticleID-0/set e-    cyan

# If 'orange' is not recognized by your build, use RGBA instead:
/vis/modeling/trajectories/drawByParticleID-0/setRGBA gamma 1.0 1.0 0.0 1.0
/vis/modeling/trajectories/drawByParticleID-0/setRGBA e-    0.0 1.0 1.0 1.0
/vis/modeling/trajectories/drawByParticleID-0/setRGBA neutron 0.0 1.0 0.0 1.0

# (Re)add trajectories to the scene (harmless if already present)
/vis/scene/add/trajectories
